CrowMotionPath path = new CrowMotionPath(double maxVelocity, Event[] events, AutonPoint[] controlPoints, Rotations[] rotations)
Step 1: Solve for density using maxVelocity and an assumed frame time of .15s. Use 2x the calculated theoretical calculated density for safety.
Step 2: Check the number of control points, if it is more than 2 solve for cubic Bezier curve at desired density otherwise solve for linear Bezier curve at desired density.
Step 3: Create pathPoints
a. Use Bezier points as the coordnets for the pathpoints
b. Add events to the pathPoint that is using the Bezier curve point that is closest to the eventTriggurePercent in the array. For example if there are 5 Bezier points and an event is supposed to triggure at 50%, add the event to point number 2
c. Assign each pathPoint a desired rotation value by assuming a linear rotation rate between the last rotation point and the next rotation point. For example if three points exists and the inital rotation is 0 the end is 90 and the direction is positive, set the first point as 0 degrees, the second point as 45 and the third point as 90. If it is the first rotation use the robots current rotation as the first rotation value.
Step 4. Return an array of PathPoints[]


CrowMotionTrajectory trajectory = new CrowMotionTrajectory(RobotProfile robotProfile, double maxDesiredTranslationalVelocity, double maxDeisredTranlationalAccleration, AutonPoints[] autonPoints, optional Rotations[] rotations, optional events)
Use wheels speeds to desaturate velocities
Public methods, runTrejectoryFrame, isFinished
AutonPoint implimentation


PathPoint
1. Includes translational data
2. Includes events
3. Desired rotations

Events.addEvent("EventName", eventFunction, eventTriggurePercent)
eventFunction should be a void function that takes zero arguments\
Rotations.addRotation(angleDegrees, desiredRotatoinPercent, direction)
direction is positive or negative, make sure to apply field mirroring to direction if needed
CrowMotionConfig-global config for all trejectories takes in robotProfile, robot position supplier, swerve velocity suppliers, swerve module module states. Apply as defulat in constructor if no arguments passed in


On Pause-
RobotProfile should encapsulate the max thoaretical velocity of the swerve modules as well as a statistical modal for the modules acceleration vs velocity. ON GROUND
Should also helper methods that run the profile for both and then create the velocity and acceleration

